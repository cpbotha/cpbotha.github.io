<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UX on voices in my head</title><link>https://cpbotha.net/tags/ux/</link><description>Recent content in UX on voices in my head</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>cpbotha@cpbotha.net (Charl P. Botha)</managingEditor><webMaster>cpbotha@cpbotha.net (Charl P. Botha)</webMaster><lastBuildDate>Wed, 06 Jan 2016 20:24:38 +0000</lastBuildDate><atom:link href="https://cpbotha.net/tags/ux/index.xml" rel="self" type="application/rss+xml"/><item><title>User interface boo-boo #1: Disabled controls without explanations!</title><link>https://cpbotha.net/2016/01/06/user-interface-boo-boo-1-disabled-controls/</link><pubDate>Wed, 06 Jan 2016 20:24:38 +0000</pubDate><author>cpbotha@cpbotha.net (Charl P. Botha)</author><guid>https://cpbotha.net/2016/01/06/user-interface-boo-boo-1-disabled-controls/</guid><description> Today as I was configuring some build settings in Qt Creator, an otherwise really great product, I was faced with this extremely frustrating situation:
I absolutely, definitely needed to configure the debugger. However, the controls required to do so were disabled, as can be seen by their greyed out visual state. Although it was easy to find the controls for configuring the debugger (good discoverability), it was impossible to find out exactly why the software would not allow me to do so.</description><content:encoded><![CDATA[ <p>Today as I was configuring some build settings in <a href="http://www.qt.io/ide/">Qt Creator</a>, an otherwise really great product, I was faced with this extremely frustrating situation:</p>








<figure><a href="/wp-content/uploads/2016/01/Screen-Shot-2016-01-06-at-4.27.00-PM.png">
    <img
        
            
            src="/wp-content/uploads/2016/01/Screen-Shot-2016-01-06-at-4.27.00-PM.png"
        /> </a>
</figure>

<p>I absolutely, definitely needed to configure the debugger. However, the controls required to do so were disabled, as can be seen by their greyed out visual state. Although it was easy to find the controls for configuring the debugger (good discoverability), it was impossible to find out exactly <em>why</em> the software would not allow me to do so.</p>
<p>What made this even more frustrating, is that it would have been straight-forward for the software to have shown me an informative tooltip or dialog box when I hovered over or clicked on the disabled controls. This message could have explained shortly why the control was disabled, and what exactly I needed to do to resolve the problem.</p>
<p>If you have or you were planning to use disabled controls in your next project without an easily discoverable (read: right on the disabled control itself) explanation of the reason (and fix) for having disabled them, I would like to say this:</p>
<img alt="JUST... JUST STOP." class="alignnone wp-image-2317 size-full" data-attachment-id="2317" data-comments-opened="1" data-image-description="" data-image-meta='{"aperture":"0","credit":"Picasa","camera":"","caption":"","created_timestamp":"1339193494","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":"","orientation":"1"}' data-image-title="stop-just-stop" data-large-file="https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop.jpg" data-medium-file="https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop-300x300.jpg" data-orig-file="https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop.jpg" data-orig-size="358,358" data-permalink="https://cpbotha.net/2016/01/06/user-interface-boo-boo-1-disabled-controls/stop-just-stop/" height="358" sizes="(max-width: 358px) 85vw, 358px" src="https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop.jpg" srcset="https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop.jpg 358w, https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop-150x150.jpg 150w, https://cpbotha.net/wp-content/uploads/2016/01/stop-just-stop-300x300.jpg 300w" width="358"/>
<p>I’ve singled out Qt Creator due to my experience today, but there are too many examples of this in modern user interfaces. <strong>Hooking up discoverable explanations to disabled controls</strong> is a small effort on the part of the programmer which multiplies to a significant time-saving and thus <strong>value-add for your users</strong>.</p>
]]></content:encoded></item><item><title>Where should that dang button go?</title><link>https://cpbotha.net/2003/05/04/where-should-that-dang-button-go/</link><pubDate>Sun, 04 May 2003 14:59:54 +0000</pubDate><author>cpbotha@cpbotha.net (Charl P. Botha)</author><guid>https://cpbotha.net/2003/05/04/where-should-that-dang-button-go/</guid><description> So, here we have the Aqua Human Interface Guidelines (i.e. the MacOS-X user interface guidelines), the GNOME Human Interface Guidelines, the KDE User Interface Guidelines and of course the Microsoft Windows Official Guidelines for User Interface Developers and Designers (I came back in January of 2018 to fix this link — also interesting is the section on margins and spacing).
Apple says that “The default button for dismissing a dialog should go in the lower-right corner.</description><content:encoded><![CDATA[ <p>So, here we have the <a href="http://developer.apple.com/techpubs/macosx/Essentials/AquaHIGuidelines/index.html">Aqua Human Interface Guidelines</a> (i.e. the MacOS-X user interface guidelines), the <a href="http://developer.gnome.org/projects/gup/hig/">GNOME Human Interface Guidelines</a>, the <a href="http://developer.kde.org/documentation/standards/kde/style/basics/index.html">KDE User Interface Guidelines</a> and of course the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn688964(v=vs.85).aspx">Microsoft Windows Official Guidelines for User Interface Developers and Designers</a> (I came back in January of 2018 to fix this link — also interesting is the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn742486(v=vs.85).aspx">section on margins and spacing</a>).</p>
<p>Apple <a href="http://developer.apple.com/techpubs/macosx/Essentials/AquaHIGuidelines/AHIGLayout/chapter_8_section_2.html">says</a> that “The default button for dismissing a dialog should go in the lower-right corner. If there’s a Cancel button, it should be to the left of the default button.”. Gnome <a href="http://developer.gnome.org/projects/gup/hig/1.0/windows.html#alert-button-order">seems to imply</a> that the default button should be on the bottom right, with other buttons to its left, which is more or less consistent with the Apple guidelines.</p>
<p>Microsoft <a href="http://msdn.microsoft.com/library/default.asp?url=https://cpbotha.net/library/en-us/dnwue/html/ch09d.asp">says</a>: “Lay out the major command buttons either stacked along the upper right border of the dialog box or lined up across the bottom of the dialog box. Position the most important button — typically the default command — as the first button in the set.” The KDE User Interface Guidelines don’t seem to set specific constraints on this kind of button placement, but judging by many of the standard KDE 3.1 applications, the dialogs seem to follow the Windows convention.</p>
<p>more</p>
<p>So, amongst these major user interfaces, it seems there are two camps: the “default-button-first-in-the-group” camp and the “default-button-in-the-bottom-right-corner” camp, which leaves us with a major headache if we’re trying to develop cross-platform software. No matter what convention you choose for, there are going to be clashes between the dialog boxes you’ve designed for your application and the OS-specific common dialogs (e.g. colour selection, font selection, etc.) that you’re bound to use.</p>
<p>I’m afraid that I’m going to have to opt for the Windows/KDE convention. Linux users have learnt to live with the inconsistency (KDE vs Gnome conventions in this case) and will probably not notice. Windows users on the other hand, are quite used to the relative position of their buttons. I confirmed this by conducting a survey amongst a large group consisting of one novice Windows user. How’s that for solid research?</p>
<p>Seriously though, the application in question will mostly be used by two kinds of users: Doctors or non-geek professionals using Windows and Super-Geeks Using Linux. The former group will probably be significantly larger than the latter group.</p>
<p>What do you think?</p>
]]></content:encoded></item></channel></rss>